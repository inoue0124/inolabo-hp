{"version":3,"file":"component---src-templates-index-template-tsx-77aff53de16df123a334.js","mappings":"8NASA,IAAMA,EAAI,sFAOJC,GAAOC,EAAAA,EAAAA,IAAH,OAEGC,EAA0C,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACrD,cAAIF,IAAKF,GACNI,EAAMC,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACZ,IAAKA,EAAKC,YACR,MAAM,IAAIC,MAAM,4BAElB,MAAwBF,EAAKC,YAArBE,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACd,OACE,cAAIR,IAAKD,EAAMU,IAAKF,IAClB,QAAC,EAAAG,KAAD,CAAMC,GAAIJ,GAAQC,GADpB,KACoCJ,EAAKC,YAAYO,KADrD,W,uFCjBR,SAASC,EAAQC,EAAgBC,GAC/B,OAAOA,GAAQ,EAAR,IAAgBD,EAAhB,IAA+BA,EAA/B,IAAyCC,EAGlD,IAAMC,GAAU,OAAON,EAAAA,KAAP,sBAAH,oMAeAO,EAA8B,SAAC,GAAD,IAAGH,EAAH,EAAGA,OAAQC,EAAX,EAAWA,KAAMG,EAAjB,EAAiBA,MAAjB,OACzC,mBACGH,EAAO,IAAK,QAACC,EAAD,CAASL,GAAIE,EAAQC,EAAQC,EAAO,IAApC,YACZA,EAAOG,IAAS,QAACF,EAAD,CAASL,GAAIE,EAAQC,EAAQC,EAAO,IAApC,W,4FCFrB,UAhBgD,SAAC,GAAD,IAAGI,EAAH,EAAGA,KAAMC,EAAT,EAASA,YAAT,OAC9C,QAAC,IAAD,MACE,QAAC,IAAD,CACEC,KAAM,CACJ,CAAEC,KAAM,cAAeC,QAAS,UAChC,CAAED,KAAM,WAAYC,QAAS,yBAGjC,2CACA,QAAC,IAAD,CAAarB,MAAOiB,EAAKK,OAAOtB,SAChC,QAAC,IAAD,CAAOa,KAAMK,EAAYL,KAAMD,OAAQM,EAAYN,OAAQI,MAAOE,EAAYK,aAC9E,oBACA,QAAC,EAAAf,KAAD,CAAMC,GAAG,SAAT","sources":["webpack://@goblindegook/gatsby-starter-typescript/./src/components/ContentList.tsx","webpack://@goblindegook/gatsby-starter-typescript/./src/components/Pager.tsx","webpack://@goblindegook/gatsby-starter-typescript/./src/templates/IndexTemplate.tsx"],"sourcesContent":["import { css } from '@emotion/react'\nimport { Link } from 'gatsby'\n\ninterface ContentListProps {\n  readonly edges:\n    | GatsbyTypes.IndexPageQuery['allMdx']['edges']\n    | GatsbyTypes.TagPageQuery['allMdx']['edges']\n}\n\nconst list = css`\n  line-height: 1.8;\n  list-style: none;\n  padding: 0;\n  margin: 1rem 0 2rem;\n`\n\nconst item = css``\n\nexport const ContentList: React.FC<ContentListProps> = ({ edges }) => (\n  <ul css={list}>\n    {edges.map(({ node }) => {\n      if (!node.frontmatter) {\n        throw new Error('frontmatter is undefined')\n      }\n      const { path, title } = node.frontmatter\n      return (\n        <li css={item} key={path}>\n          <Link to={path!}>{title}</Link> ({node.frontmatter.date})\n        </li>\n      )\n    })}\n  </ul>\n)\n","import styled from '@emotion/styled'\nimport { Link } from 'gatsby'\n\ninterface PagerProps {\n  readonly prefix: string\n  readonly page: number\n  readonly total: number\n}\n\nfunction pageUrl(prefix: string, page: number): string {\n  return page <= 1 ? `/${prefix}` : `/${prefix}/${page}`\n}\n\nconst NavLink = styled(Link)`\n  background-color: #ff5700;\n  border-radius: 3px;\n  color: #fff;\n  font-family: sans-serif;\n  margin: 0 1rem 0 0;\n  padding: 0.25rem 0.5rem;\n  text-decoration: none;\n\n  &:active,\n  &:hover {\n    color: #fff;\n  }\n`\n\nexport const Pager: React.FC<PagerProps> = ({ prefix, page, total }) => (\n  <div>\n    {page > 1 && <NavLink to={pageUrl(prefix, page - 1)}>Previous</NavLink>}\n    {page < total && <NavLink to={pageUrl(prefix, page + 1)}>Next</NavLink>}\n  </div>\n)\n","import { Link, graphql } from 'gatsby'\nimport { Helmet } from 'react-helmet'\nimport { ContentList } from '../components/ContentList'\nimport { Pager } from '../components/Pager'\nimport { Layout } from '../components/Layout'\nimport { ArchivePageContext } from '../context'\n\ninterface IndexPageProps {\n  readonly data: GatsbyTypes.IndexPageQuery\n\n  readonly pageContext: ArchivePageContext & GatsbyTypes.IndexPageQueryVariables\n}\n\nconst IndexTemplate: React.FC<IndexPageProps> = ({ data, pageContext }) => (\n  <Layout>\n    <Helmet\n      meta={[\n        { name: 'description', content: 'Sample' },\n        { name: 'keywords', content: 'sample, something' },\n      ]}\n    />\n    <h2>All Markdown Content</h2>\n    <ContentList edges={data.allMdx.edges} />\n    <Pager page={pageContext.page} prefix={pageContext.prefix} total={pageContext.pageTotal} />\n    <hr />\n    <Link to=\"/tags\">All tags</Link>\n  </Layout>\n)\n\nexport default IndexTemplate\n\nexport const query = graphql`\n  query IndexPage($skip: Int!, $limit: Int!) {\n    allMdx(\n      filter: { frontmatter: { draft: { ne: true } } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          frontmatter {\n            date(formatString: \"MMMM D, YYYY\")\n            path\n            title\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["list","item","css","ContentList","edges","map","node","frontmatter","Error","path","title","key","Link","to","date","pageUrl","prefix","page","NavLink","Pager","total","data","pageContext","meta","name","content","allMdx","pageTotal"],"sourceRoot":""}